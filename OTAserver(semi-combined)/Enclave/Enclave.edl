/* Enclave.edl - Top EDL file. */

enclave {
	include "time.h"
	include "stdint.h"
	include "sgx_uae_service.h"
	include "sgx_quote.h"
	include "sgx_tcrypto.h"
	include "sgx_trts.h"
	include "sgx_tae_service.h"
	include "sgx_utils.h"
	include "sgx_urts.h"
	include "sgx_tkey_exchange.h"
	include "sgx_error.h"
	from "sgx_tstdc.edl" import *;
	from "sgx_tkey_exchange.edl" import *;

	struct Sizes{
		int64_t header;
		int64_t mac;
		int64_t sig;
		int64_t enc;
		int64_t file;
	};


    trusted {
		public void ecall_start_tls_client([in, size=16]char *ip,[in, size=filelen]char *bytearr,int64_t filelen, Sizes s);

		public long encryption([in,size=inputlen] char *inputarr, long inputlen, [out,size=enclen] char *encarr, long enclen, [out,size=16]char *macarr);

		public sgx_status_t ecall_ra_init(sgx_ec256_public_t key, int b_pse, [out] sgx_ra_context_t *ctx);
	};

    untrusted {
		long ocall_sgx_clock(void);		/* For Performance evaluation */
		time_t ocall_sgx_time([out, size=t_len]time_t *timep, int t_len);
		struct tm *ocall_sgx_localtime([in, size=t_len]const time_t *timep, int t_len);
		struct tm *ocall_sgx_gmtime_r([in, size=t_len]const time_t *timep, int t_len, [out, size=tmp_len]struct tm *tmp, int tmp_len);
		int ocall_sgx_gettimeofday([in, out, size=tv_size]void *tv, int tv_size); 
		int ocall_sgx_getsockopt(int s, int level, int optname, [out, size=optval_len]char *optval, int optval_len, [in,out, size=4]int* optlen);
        int ocall_sgx_setsockopt(int s, int level, int optname, [in, size=optlen]const void *optval, int optlen);
        int ocall_sgx_socket(int af, int type, int protocol);		
		int ocall_sgx_listen(int s, int backlog);
		int ocall_sgx_bind(int s, [in, size=addr_size]const void *addr, int addr_size);
		int ocall_sgx_connect(int s, [in, size=addrlen]const void *addr, int addrlen);
		int ocall_sgx_accept(int s, [out, size=addr_size]void *addr, int addr_size, [in, out, size=4]int *addrlen); 
		int ocall_sgx_shutdown(int fd, int how);
		int ocall_sgx_read(int fd, [out, size=n]void *buf, int n);
		int ocall_sgx_write(int fd, [in, size=n]const void *buf, int n);
		int ocall_sgx_close(int fd);
		int ocall_sgx_getenv([in,size=envlen]const char *env, int envlen, [out,size=ret_len]char *ret_str,int ret_len);
		void ocall_print_string([in, string] const char *str);    


		//////////////////////////////////////////////////////////////////////////////////////
		char *ocall_readCKfile([in,string]const char *file);    
		//uint32_t ocall_get_epid_group_id();
		//sgx_ra_msg1_t ocall_get_msg1(sgx_ra_context_t raCtx, sgx_enclave_id_t enclave_id, sgx_ra_msg1_t msg1);

		//sgx_ra_msg3_t *ocall_ra_proc_msg2(sgx_ra_context_t raCtx, sgx_enclave_id_t global_eid, sgx_ra_msg2_t msg2, uint32_t msg2size,[out, size=p_msg3_size] sgx_ra_msg3_t *msg3, uint32_t p_msg3_size); 
    };

};
