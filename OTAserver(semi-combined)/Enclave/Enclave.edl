/* Enclave.edl - Top EDL file. */

enclave {
	include "time.h"
	include "stdint.h"
	include "sgx_uae_service.h"
	include "sgx_quote.h"
	include "sgx_tcrypto.h"
	include "sgx_trts.h"
	include "sgx_tae_service.h"
	include "sgx_utils.h"
	include "sgx_urts.h"

	from "sgx_tstdc.edl" import *;

	struct Sizes{
		int64_t header;
		int64_t mac;
		int64_t sig;
		int64_t enc;
		int64_t file;
	};
	struct server_msg0
	{
	    unsigned char  type[50];     /* set to one of ra_msg_type_t*/
	    uint32_t    epid;
	};
	
	struct server_msg1full
	{
	    unsigned char   type[50]; 
	    sgx_target_info_t target_info;   
	    sgx_epid_group_id_t     gid;         /* the Endian-ness of D is Little-Endian */
	};

		
	
	struct client_msg2
	{
	    unsigned char  type[50];
	    sgx_spid_t spid[16];
	    uint16_t quote_type;
	    uint32_t sig_rl_size;
	    uint8_t sig_rl[500];
	};
	
	struct server_msg3
	{
	    unsigned char  type[50];
	    sgx_ps_sec_prop_desc_t   ps_sec_prop; //define as 0 as not required
	    uint8_t     quote[2048];
	};
	

	
    trusted {
		public void ecall_start_tls_client([in, size=16]char *ip,[in, size=filelen]char *bytearr,int64_t filelen, Sizes s, server_msg0 msg0, server_msg1full msg1);

		public long encryption([in,size=inputlen] char *inputarr, long inputlen, [out,size=enclen] char *encarr, long enclen, [out,size=16]char *macarr);
	};

    untrusted {
		long ocall_sgx_clock(void);		/* For Performance evaluation */
		time_t ocall_sgx_time([out, size=t_len]time_t *timep, int t_len);
		struct tm *ocall_sgx_localtime([in, size=t_len]const time_t *timep, int t_len);
		struct tm *ocall_sgx_gmtime_r([in, size=t_len]const time_t *timep, int t_len, [out, size=tmp_len]struct tm *tmp, int tmp_len);
		int ocall_sgx_gettimeofday([in, out, size=tv_size]void *tv, int tv_size); 
		int ocall_sgx_getsockopt(int s, int level, int optname, [out, size=optval_len]char *optval, int optval_len, [in,out, size=4]int* optlen);
        int ocall_sgx_setsockopt(int s, int level, int optname, [in, size=optlen]const void *optval, int optlen);
        int ocall_sgx_socket(int af, int type, int protocol);		
		int ocall_sgx_listen(int s, int backlog);
		int ocall_sgx_bind(int s, [in, size=addr_size]const void *addr, int addr_size);
		int ocall_sgx_connect(int s, [in, size=addrlen]const void *addr, int addrlen);
		int ocall_sgx_accept(int s, [out, size=addr_size]void *addr, int addr_size, [in, out, size=4]int *addrlen); 
		int ocall_sgx_shutdown(int fd, int how);
		int ocall_sgx_read(int fd, [out, size=n]void *buf, int n);
		int ocall_sgx_write(int fd, [in, size=n]const void *buf, int n);
		int ocall_sgx_close(int fd);
		int ocall_sgx_getenv([in,size=envlen]const char *env, int envlen, [out,size=ret_len]char *ret_str,int ret_len);
		void ocall_print_string([in, string] const char *str);    

		//////////////////////////////////////////////////////////////////////////////////////
		char *ocall_readCKfile([in,string]const char *file);    
		uint32_t* ocall_get_epid_group_id([in,size=2]uint32_t *extended_epid_group_id);
    };

};
